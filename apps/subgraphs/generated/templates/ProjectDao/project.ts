// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AuctionsEnded extends ethereum.Event {
  get params(): AuctionsEnded__Params {
    return new AuctionsEnded__Params(this);
  }
}

export class AuctionsEnded__Params {
  _event: AuctionsEnded;

  constructor(event: AuctionsEnded) {
    this._event = event;
  }

  get ended(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class AuctionsStarted extends ethereum.Event {
  get params(): AuctionsStarted__Params {
    return new AuctionsStarted__Params(this);
  }
}

export class AuctionsStarted__Params {
  _event: AuctionsStarted;

  constructor(event: AuctionsStarted) {
    this._event = event;
  }

  get started(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Configured extends ethereum.Event {
  get params(): Configured__Params {
    return new Configured__Params(this);
  }
}

export class Configured__Params {
  _event: Configured;

  constructor(event: Configured) {
    this._event = event;
  }

  get imgHash(): string {
    return this._event.parameters[0].value.toString();
  }

  get blurbHash(): string {
    return this._event.parameters[1].value.toString();
  }

  get newGenre(): string {
    return this._event.parameters[2].value.toString();
  }

  get newSubtitle(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ContributorAdded extends ethereum.Event {
  get params(): ContributorAdded__Params {
    return new ContributorAdded__Params(this);
  }
}

export class ContributorAdded__Params {
  _event: ContributorAdded;

  constructor(event: ContributorAdded) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get role(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Paused1 extends ethereum.Event {
  get params(): Paused1__Params {
    return new Paused1__Params(this);
  }
}

export class Paused1__Params {
  _event: Paused1;

  constructor(event: Paused1) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TextSet extends ethereum.Event {
  get params(): TextSet__Params {
    return new TextSet__Params(this);
  }
}

export class TextSet__Params {
  _event: TextSet;

  constructor(event: TextSet) {
    this._event = event;
  }

  get textHash(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class project__authorResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class project__contributorsResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: string, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class project__projectResult {
  value0: string;
  value1: string;
  value2: string;
  value3: Address;
  value4: string;
  value5: string;
  value6: string;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: Address,
    value4: string,
    value5: string,
    value6: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }
}

export class project extends ethereum.SmartContract {
  static bind(address: Address): project {
    return new project("project", address);
  }

  AUCTION_DURATION(): BigInt {
    let result = super.call(
      "AUCTION_DURATION",
      "AUCTION_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_AUCTION_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AUCTION_DURATION",
      "AUCTION_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  AUTHOR_ROLE(): Bytes {
    let result = super.call("AUTHOR_ROLE", "AUTHOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_AUTHOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("AUTHOR_ROLE", "AUTHOR_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INITIAL_MINT_PRICE(): BigInt {
    let result = super.call(
      "INITIAL_MINT_PRICE",
      "INITIAL_MINT_PRICE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_INITIAL_MINT_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INITIAL_MINT_PRICE",
      "INITIAL_MINT_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PER_WALLET(): BigInt {
    let result = super.call("MAX_PER_WALLET", "MAX_PER_WALLET():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_PER_WALLET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PER_WALLET",
      "MAX_PER_WALLET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auctionPhaseFinished(): boolean {
    let result = super.call(
      "auctionPhaseFinished",
      "auctionPhaseFinished():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_auctionPhaseFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "auctionPhaseFinished",
      "auctionPhaseFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  auctionStarted(): boolean {
    let result = super.call("auctionStarted", "auctionStarted():(bool)", []);

    return result[0].toBoolean();
  }

  try_auctionStarted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("auctionStarted", "auctionStarted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  author(): project__authorResult {
    let result = super.call(
      "author",
      "author():(uint256,uint256,uint256,bool)",
      []
    );

    return new project__authorResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_author(): ethereum.CallResult<project__authorResult> {
    let result = super.tryCall(
      "author",
      "author():(uint256,uint256,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new project__authorResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  contributorIndex(): i32 {
    let result = super.call(
      "contributorIndex",
      "contributorIndex():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_contributorIndex(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contributorIndex",
      "contributorIndex():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  contributors(param0: BigInt): project__contributorsResult {
    let result = super.call(
      "contributors",
      "contributors(uint256):(address,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new project__contributorsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_contributors(
    param0: BigInt
  ): ethereum.CallResult<project__contributorsResult> {
    let result = super.tryCall(
      "contributors",
      "contributors(uint256):(address,string,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new project__contributorsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  currentEdition(): BigInt {
    let result = super.call("currentEdition", "currentEdition():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEdition(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEdition",
      "currentEdition():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEditionMax(): BigInt {
    let result = super.call(
      "currentEditionMax",
      "currentEditionMax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEditionMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEditionMax",
      "currentEditionMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEditionMintPrice(): BigInt {
    let result = super.call(
      "currentEditionMintPrice",
      "currentEditionMintPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEditionMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEditionMintPrice",
      "currentEditionMintPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  discountRate(): BigInt {
    let result = super.call("discountRate", "discountRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_discountRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("discountRate", "discountRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expiresAt(): BigInt {
    let result = super.call("expiresAt", "expiresAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiresAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiresAt", "expiresAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPrice(): BigInt {
    let result = super.call("getPrice", "getPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  project(): project__projectResult {
    let result = super.call(
      "project",
      "project():(string,string,string,address,string,string,string)",
      []
    );

    return new project__projectResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toAddress(),
      result[4].toString(),
      result[5].toString(),
      result[6].toString()
    );
  }

  try_project(): ethereum.CallResult<project__projectResult> {
    let result = super.tryCall(
      "project",
      "project():(string,string,string,address,string,string,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new project__projectResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toAddress(),
        value[4].toString(),
        value[5].toString(),
        value[6].toString()
      )
    );
  }

  showTimestamp(): BigInt {
    let result = super.call("showTimestamp", "showTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_showTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "showTimestamp",
      "showTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startAt(): BigInt {
    let result = super.call("startAt", "startAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startAt", "startAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSharePercentage(): BigInt {
    let result = super.call(
      "totalSharePercentage",
      "totalSharePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSharePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSharePercentage",
      "totalSharePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _author_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _textIpfsHash(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _initialMintPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _firstEditionMax(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _factory(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddContributorsCall extends ethereum.Call {
  get inputs(): AddContributorsCall__Inputs {
    return new AddContributorsCall__Inputs(this);
  }

  get outputs(): AddContributorsCall__Outputs {
    return new AddContributorsCall__Outputs(this);
  }
}

export class AddContributorsCall__Inputs {
  _call: AddContributorsCall;

  constructor(call: AddContributorsCall) {
    this._call = call;
  }

  get _contributors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _shares(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _roles(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class AddContributorsCall__Outputs {
  _call: AddContributorsCall;

  constructor(call: AddContributorsCall) {
    this._call = call;
  }
}

export class AuthorMintCall extends ethereum.Call {
  get inputs(): AuthorMintCall__Inputs {
    return new AuthorMintCall__Inputs(this);
  }

  get outputs(): AuthorMintCall__Outputs {
    return new AuthorMintCall__Outputs(this);
  }
}

export class AuthorMintCall__Inputs {
  _call: AuthorMintCall;

  constructor(call: AuthorMintCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AuthorMintCall__Outputs {
  _call: AuthorMintCall;

  constructor(call: AuthorMintCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ConfigureProjectDetailsCall extends ethereum.Call {
  get inputs(): ConfigureProjectDetailsCall__Inputs {
    return new ConfigureProjectDetailsCall__Inputs(this);
  }

  get outputs(): ConfigureProjectDetailsCall__Outputs {
    return new ConfigureProjectDetailsCall__Outputs(this);
  }
}

export class ConfigureProjectDetailsCall__Inputs {
  _call: ConfigureProjectDetailsCall;

  constructor(call: ConfigureProjectDetailsCall) {
    this._call = call;
  }

  get _imgHash(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _blurbHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _genre(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _subtitle(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConfigureProjectDetailsCall__Outputs {
  _call: ConfigureProjectDetailsCall;

  constructor(call: ConfigureProjectDetailsCall) {
    this._call = call;
  }
}

export class DestroyCall extends ethereum.Call {
  get inputs(): DestroyCall__Inputs {
    return new DestroyCall__Inputs(this);
  }

  get outputs(): DestroyCall__Outputs {
    return new DestroyCall__Outputs(this);
  }
}

export class DestroyCall__Inputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class DestroyCall__Outputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class EnableNextEditionCall extends ethereum.Call {
  get inputs(): EnableNextEditionCall__Inputs {
    return new EnableNextEditionCall__Inputs(this);
  }

  get outputs(): EnableNextEditionCall__Outputs {
    return new EnableNextEditionCall__Outputs(this);
  }
}

export class EnableNextEditionCall__Inputs {
  _call: EnableNextEditionCall;

  constructor(call: EnableNextEditionCall) {
    this._call = call;
  }

  get _maxNftAmountOfNewEdition(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newEditionMintPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnableNextEditionCall__Outputs {
  _call: EnableNextEditionCall;

  constructor(call: EnableNextEditionCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RetriggerAuctionCall extends ethereum.Call {
  get inputs(): RetriggerAuctionCall__Inputs {
    return new RetriggerAuctionCall__Inputs(this);
  }

  get outputs(): RetriggerAuctionCall__Outputs {
    return new RetriggerAuctionCall__Outputs(this);
  }
}

export class RetriggerAuctionCall__Inputs {
  _call: RetriggerAuctionCall;

  constructor(call: RetriggerAuctionCall) {
    this._call = call;
  }
}

export class RetriggerAuctionCall__Outputs {
  _call: RetriggerAuctionCall;

  constructor(call: RetriggerAuctionCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetTextIpfsHashCall extends ethereum.Call {
  get inputs(): SetTextIpfsHashCall__Inputs {
    return new SetTextIpfsHashCall__Inputs(this);
  }

  get outputs(): SetTextIpfsHashCall__Outputs {
    return new SetTextIpfsHashCall__Outputs(this);
  }
}

export class SetTextIpfsHashCall__Inputs {
  _call: SetTextIpfsHashCall;

  constructor(call: SetTextIpfsHashCall) {
    this._call = call;
  }

  get _ipfsHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetTextIpfsHashCall__Outputs {
  _call: SetTextIpfsHashCall;

  constructor(call: SetTextIpfsHashCall) {
    this._call = call;
  }
}

export class TriggerFirstAuctionCall extends ethereum.Call {
  get inputs(): TriggerFirstAuctionCall__Inputs {
    return new TriggerFirstAuctionCall__Inputs(this);
  }

  get outputs(): TriggerFirstAuctionCall__Outputs {
    return new TriggerFirstAuctionCall__Outputs(this);
  }
}

export class TriggerFirstAuctionCall__Inputs {
  _call: TriggerFirstAuctionCall;

  constructor(call: TriggerFirstAuctionCall) {
    this._call = call;
  }

  get _discountRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TriggerFirstAuctionCall__Outputs {
  _call: TriggerFirstAuctionCall;

  constructor(call: TriggerFirstAuctionCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
