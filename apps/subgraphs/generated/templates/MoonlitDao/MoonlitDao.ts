// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContributorAdded extends ethereum.Event {
  get params(): ContributorAdded__Params {
    return new ContributorAdded__Params(this);
  }
}

export class ContributorAdded__Params {
  _event: ContributorAdded;

  constructor(event: ContributorAdded) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get role(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class FundingEnded extends ethereum.Event {
  get params(): FundingEnded__Params {
    return new FundingEnded__Params(this);
  }
}

export class FundingEnded__Params {
  _event: FundingEnded;

  constructor(event: FundingEnded) {
    this._event = event;
  }

  get finished(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class GenreSet extends ethereum.Event {
  get params(): GenreSet__Params {
    return new GenreSet__Params(this);
  }
}

export class GenreSet__Params {
  _event: GenreSet;

  constructor(event: GenreSet) {
    this._event = event;
  }

  get newGenre(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SubtitleSet extends ethereum.Event {
  get params(): SubtitleSet__Params {
    return new SubtitleSet__Params(this);
  }
}

export class SubtitleSet__Params {
  _event: SubtitleSet;

  constructor(event: SubtitleSet) {
    this._event = event;
  }

  get newSubtitle(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class URISet extends ethereum.Event {
  get params(): URISet__Params {
    return new URISet__Params(this);
  }
}

export class URISet__Params {
  _event: URISet;

  constructor(event: URISet) {
    this._event = event;
  }

  get ipfsHash(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class MoonlitDao__authorResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class MoonlitDao__contributorsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class MoonlitDao__projectResult {
  value0: string;
  value1: string;
  value2: string;
  value3: Address;
  value4: Bytes;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: Address,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    return map;
  }
}

export class MoonlitDao extends ethereum.SmartContract {
  static bind(address: Address): MoonlitDao {
    return new MoonlitDao("MoonlitDao", address);
  }

  AUTHOR_ROLE(): Bytes {
    let result = super.call("AUTHOR_ROLE", "AUTHOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_AUTHOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("AUTHOR_ROLE", "AUTHOR_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INITIAL_MINT_PRICE(): BigInt {
    let result = super.call(
      "INITIAL_MINT_PRICE",
      "INITIAL_MINT_PRICE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_INITIAL_MINT_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INITIAL_MINT_PRICE",
      "INITIAL_MINT_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PER_WALLET(): BigInt {
    let result = super.call("MAX_PER_WALLET", "MAX_PER_WALLET():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_PER_WALLET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PER_WALLET",
      "MAX_PER_WALLET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  author(): MoonlitDao__authorResult {
    let result = super.call(
      "author",
      "author():(uint256,uint256,bool,uint256,bool)",
      []
    );

    return new MoonlitDao__authorResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_author(): ethereum.CallResult<MoonlitDao__authorResult> {
    let result = super.tryCall(
      "author",
      "author():(uint256,uint256,bool,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MoonlitDao__authorResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  contributorIndex(): i32 {
    let result = super.call(
      "contributorIndex",
      "contributorIndex():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_contributorIndex(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contributorIndex",
      "contributorIndex():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  contributors(param0: BigInt): MoonlitDao__contributorsResult {
    let result = super.call(
      "contributors",
      "contributors(uint256):(address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MoonlitDao__contributorsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_contributors(
    param0: BigInt
  ): ethereum.CallResult<MoonlitDao__contributorsResult> {
    let result = super.tryCall(
      "contributors",
      "contributors(uint256):(address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MoonlitDao__contributorsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  currentEdition(): BigInt {
    let result = super.call("currentEdition", "currentEdition():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEdition(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEdition",
      "currentEdition():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEditionMax(): BigInt {
    let result = super.call(
      "currentEditionMax",
      "currentEditionMax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEditionMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEditionMax",
      "currentEditionMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEditionMintPrice(): BigInt {
    let result = super.call(
      "currentEditionMintPrice",
      "currentEditionMintPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEditionMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEditionMintPrice",
      "currentEditionMintPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundedAmount(): BigInt {
    let result = super.call("fundedAmount", "fundedAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundedAmount", "fundedAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  investingFinished(): boolean {
    let result = super.call(
      "investingFinished",
      "investingFinished():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_investingFinished(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "investingFinished",
      "investingFinished():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  investments(param0: Address): BigInt {
    let result = super.call("investments", "investments(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_investments(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investments",
      "investments(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  project(): MoonlitDao__projectResult {
    let result = super.call(
      "project",
      "project():(string,string,string,address,bytes)",
      []
    );

    return new MoonlitDao__projectResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toAddress(),
      result[4].toBytes()
    );
  }

  try_project(): ethereum.CallResult<MoonlitDao__projectResult> {
    let result = super.tryCall(
      "project",
      "project():(string,string,string,address,bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MoonlitDao__projectResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toAddress(),
        value[4].toBytes()
      )
    );
  }

  refundEnabled(): boolean {
    let result = super.call("refundEnabled", "refundEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_refundEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("refundEnabled", "refundEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shareSentToMoonlit(): boolean {
    let result = super.call(
      "shareSentToMoonlit",
      "shareSentToMoonlit():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_shareSentToMoonlit(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shareSentToMoonlit",
      "shareSentToMoonlit():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSharePercentage(): BigInt {
    let result = super.call(
      "totalSharePercentage",
      "totalSharePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSharePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSharePercentage",
      "totalSharePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _author_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ipfsLink(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _initialMintPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _firstEditionMax(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _factory(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddContributorCall extends ethereum.Call {
  get inputs(): AddContributorCall__Inputs {
    return new AddContributorCall__Inputs(this);
  }

  get outputs(): AddContributorCall__Outputs {
    return new AddContributorCall__Outputs(this);
  }
}

export class AddContributorCall__Inputs {
  _call: AddContributorCall;

  constructor(call: AddContributorCall) {
    this._call = call;
  }

  get _contributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _share(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddContributorCall__Outputs {
  _call: AddContributorCall;

  constructor(call: AddContributorCall) {
    this._call = call;
  }
}

export class ClaimGenesisEditionNFTCall extends ethereum.Call {
  get inputs(): ClaimGenesisEditionNFTCall__Inputs {
    return new ClaimGenesisEditionNFTCall__Inputs(this);
  }

  get outputs(): ClaimGenesisEditionNFTCall__Outputs {
    return new ClaimGenesisEditionNFTCall__Outputs(this);
  }
}

export class ClaimGenesisEditionNFTCall__Inputs {
  _call: ClaimGenesisEditionNFTCall;

  constructor(call: ClaimGenesisEditionNFTCall) {
    this._call = call;
  }
}

export class ClaimGenesisEditionNFTCall__Outputs {
  _call: ClaimGenesisEditionNFTCall;

  constructor(call: ClaimGenesisEditionNFTCall) {
    this._call = call;
  }
}

export class ClaimRefundCall extends ethereum.Call {
  get inputs(): ClaimRefundCall__Inputs {
    return new ClaimRefundCall__Inputs(this);
  }

  get outputs(): ClaimRefundCall__Outputs {
    return new ClaimRefundCall__Outputs(this);
  }
}

export class ClaimRefundCall__Inputs {
  _call: ClaimRefundCall;

  constructor(call: ClaimRefundCall) {
    this._call = call;
  }
}

export class ClaimRefundCall__Outputs {
  _call: ClaimRefundCall;

  constructor(call: ClaimRefundCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EnableNextEditionCall extends ethereum.Call {
  get inputs(): EnableNextEditionCall__Inputs {
    return new EnableNextEditionCall__Inputs(this);
  }

  get outputs(): EnableNextEditionCall__Outputs {
    return new EnableNextEditionCall__Outputs(this);
  }
}

export class EnableNextEditionCall__Inputs {
  _call: EnableNextEditionCall;

  constructor(call: EnableNextEditionCall) {
    this._call = call;
  }

  get _maxNftAmountOfNewEdition(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newEditionMintPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnableNextEditionCall__Outputs {
  _call: EnableNextEditionCall;

  constructor(call: EnableNextEditionCall) {
    this._call = call;
  }
}

export class EnableRefundCall extends ethereum.Call {
  get inputs(): EnableRefundCall__Inputs {
    return new EnableRefundCall__Inputs(this);
  }

  get outputs(): EnableRefundCall__Outputs {
    return new EnableRefundCall__Outputs(this);
  }
}

export class EnableRefundCall__Inputs {
  _call: EnableRefundCall;

  constructor(call: EnableRefundCall) {
    this._call = call;
  }
}

export class EnableRefundCall__Outputs {
  _call: EnableRefundCall;

  constructor(call: EnableRefundCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetGenreCall extends ethereum.Call {
  get inputs(): SetGenreCall__Inputs {
    return new SetGenreCall__Inputs(this);
  }

  get outputs(): SetGenreCall__Outputs {
    return new SetGenreCall__Outputs(this);
  }
}

export class SetGenreCall__Inputs {
  _call: SetGenreCall;

  constructor(call: SetGenreCall) {
    this._call = call;
  }

  get _genre(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetGenreCall__Outputs {
  _call: SetGenreCall;

  constructor(call: SetGenreCall) {
    this._call = call;
  }
}

export class SetHashCall extends ethereum.Call {
  get inputs(): SetHashCall__Inputs {
    return new SetHashCall__Inputs(this);
  }

  get outputs(): SetHashCall__Outputs {
    return new SetHashCall__Outputs(this);
  }
}

export class SetHashCall__Inputs {
  _call: SetHashCall;

  constructor(call: SetHashCall) {
    this._call = call;
  }

  get _ipfsHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetHashCall__Outputs {
  _call: SetHashCall;

  constructor(call: SetHashCall) {
    this._call = call;
  }
}

export class SetMaxGenesisClaimableAuthorCall extends ethereum.Call {
  get inputs(): SetMaxGenesisClaimableAuthorCall__Inputs {
    return new SetMaxGenesisClaimableAuthorCall__Inputs(this);
  }

  get outputs(): SetMaxGenesisClaimableAuthorCall__Outputs {
    return new SetMaxGenesisClaimableAuthorCall__Outputs(this);
  }
}

export class SetMaxGenesisClaimableAuthorCall__Inputs {
  _call: SetMaxGenesisClaimableAuthorCall;

  constructor(call: SetMaxGenesisClaimableAuthorCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxGenesisClaimableAuthorCall__Outputs {
  _call: SetMaxGenesisClaimableAuthorCall;

  constructor(call: SetMaxGenesisClaimableAuthorCall) {
    this._call = call;
  }
}

export class SetSubtitleCall extends ethereum.Call {
  get inputs(): SetSubtitleCall__Inputs {
    return new SetSubtitleCall__Inputs(this);
  }

  get outputs(): SetSubtitleCall__Outputs {
    return new SetSubtitleCall__Outputs(this);
  }
}

export class SetSubtitleCall__Inputs {
  _call: SetSubtitleCall;

  constructor(call: SetSubtitleCall) {
    this._call = call;
  }

  get _subtitle(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSubtitleCall__Outputs {
  _call: SetSubtitleCall;

  constructor(call: SetSubtitleCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawShareAuthorCall extends ethereum.Call {
  get inputs(): WithdrawShareAuthorCall__Inputs {
    return new WithdrawShareAuthorCall__Inputs(this);
  }

  get outputs(): WithdrawShareAuthorCall__Outputs {
    return new WithdrawShareAuthorCall__Outputs(this);
  }
}

export class WithdrawShareAuthorCall__Inputs {
  _call: WithdrawShareAuthorCall;

  constructor(call: WithdrawShareAuthorCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawShareAuthorCall__Outputs {
  _call: WithdrawShareAuthorCall;

  constructor(call: WithdrawShareAuthorCall) {
    this._call = call;
  }
}

export class WithdrawShareContributorCall extends ethereum.Call {
  get inputs(): WithdrawShareContributorCall__Inputs {
    return new WithdrawShareContributorCall__Inputs(this);
  }

  get outputs(): WithdrawShareContributorCall__Outputs {
    return new WithdrawShareContributorCall__Outputs(this);
  }
}

export class WithdrawShareContributorCall__Inputs {
  _call: WithdrawShareContributorCall;

  constructor(call: WithdrawShareContributorCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawShareContributorCall__Outputs {
  _call: WithdrawShareContributorCall;

  constructor(call: WithdrawShareContributorCall) {
    this._call = call;
  }
}
