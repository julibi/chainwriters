//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.9;

import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

import "../interfaces/IMoonpageManager.sol";
import "../interfaces/IMoonpageCollection.sol";

// COMPILATION FAILS BECAUSE STACK IS TOO DEEP

contract BallotsAlterantive is
    Initializable,
    PausableUpgradeable,
    AccessControlUpgradeable,
    UUPSUpgradeable
{
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    uint256 public totalBallotsIndex;
    IMoonpageManager public moonpageManager;
    IMoonpageCollection public moonpageCollection;

    struct Ballot {
        string proposal;
        uint8 option1Key;
        uint8 option2Key;
        uint8 option3Key;
        string option1Value;
        string option2Value;
        string option3Value;
        uint256 option1Votes;
        uint256 option2Votes;
        uint256 option3Votes;
        uint256 votesCount;
        uint256 endTime;
        bool isVoting;
    }
    struct SingleVote {
        bool voted;
        uint8 vote;
    }
    struct ProjectData {
        uint256 startTokenId;
        uint256 endTokenId;
    }
    mapping(uint256 => mapping(uint256 => Ballot)) public ballots;
    mapping(uint256 => mapping(uint256 => ProjectData)) public ballotLimits;
    mapping(uint256 => uint256) public ballotIndeces;
    // mapping(uint256 => mapping(uint256 => mapping(uint256 => SingleVote))) votings;
    event BallotCreated(uint256 _projectId, uint256 _timeCreated);
    event Voted(uint256 votingId, uint256 time);

    modifier authorized(
        uint256 _projectId,
        uint256 _index,
        uint256[] memory _tokenIds
    ) {
        uint256 startId = ballotLimits[_projectId][_index].startTokenId;
        uint256 endId = ballotLimits[_projectId][_index].endTokenId;

        for (uint256 i = 0; i < _tokenIds.length; i++) {
            require(
                (_tokenIds[i] >= startId) &&
                    (_tokenIds[i] <= endId) &&
                    moonpageCollection.ownerOf(_tokenIds[i]) == msg.sender,
                "Not authorized"
            );
            // require(
            //     !votings[_projectId][_index][_tokenIds[i]].voted,
            //     "Already voted"
            // );
            _;
        }
    }

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    function initialize(address _mpManager, address _collection)
        public
        initializer
    {
        __Pausable_init();
        __AccessControl_init();
        __UUPSUpgradeable_init();

        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(PAUSER_ROLE, msg.sender);
        _grantRole(UPGRADER_ROLE, msg.sender);

        moonpageManager = IMoonpageManager(_mpManager);
        moonpageCollection = IMoonpageCollection(_collection);
        totalBallotsIndex = 0;
    }

    // ------------------
    // Creator functions
    // -----------------

    function createBallot(
        uint256 _projectId,
        string memory _proposal,
        string[] memory _optionValues,
        uint256 _duration
    ) external whenNotPaused {
        bool projectExists = moonpageManager.exists(_projectId);
        require(projectExists, "No collection");
        (, , , address creatorAddress, , , , , , , ) = moonpageManager
            .readBaseData(_projectId);
        (, , uint256 startTokenId, , , , uint256 endTokenId) = moonpageManager
            .readEditionData(_projectId);
        require(creatorAddress == msg.sender, "Not authorized");
        require(_optionValues.length == 3, "Must be three options");
        require(_duration == (1 | 5 | 10 | 30), "Must be three options");
        uint256 index = 0;
        if (ballotIndeces[_projectId] != 0) {
            index = ballotIndeces[_projectId] + 1;
        }

        ballots[_projectId][index].proposal = _proposal;
        ballots[_projectId][index].option1Key = 0;
        ballots[_projectId][index].option2Key = 1;
        ballots[_projectId][index].option3Key = 2;
        ballots[_projectId][index].option1Value = _optionValues[0];
        ballots[_projectId][index].option2Value = _optionValues[1];
        ballots[_projectId][index].option3Value = _optionValues[2];
        ballots[_projectId][index].option1Votes = 0;
        ballots[_projectId][index].option2Votes = 0;
        ballots[_projectId][index].option3Votes = 0;
        ballots[_projectId][index].isVoting = true;
        ballotLimits[_projectId][index].startTokenId = startTokenId;
        ballotLimits[_projectId][index].endTokenId = endTokenId;

        if (_duration == 1) {
            ballots[_projectId][index].endTime = block.timestamp + 1 days;
        } else if (_duration == 5) {
            ballots[_projectId][index].endTime = block.timestamp + 5 days;
        } else if (_duration == 10) {
            ballots[_projectId][index].endTime = block.timestamp + 10 days;
        } else {
            ballots[_projectId][index].endTime = block.timestamp + 30 days;
        }

        ballotIndeces[_projectId] = index;
        totalBallotsIndex++;
        emit BallotCreated(_projectId, block.timestamp);
    }

    // pause a vote

    // ------------------
    // Public Collector functions
    // -----------------

    function vote(
        uint256 _projectId,
        uint256 _index,
        uint256[] memory _tokenIds,
        uint256 _option
    ) external authorized(_projectId, _index, _tokenIds) {
        bool projectExists = moonpageManager.exists(_projectId);
        require(projectExists, "No collection");
        require(ballots[_projectId][_index].isVoting, "Not voting");
        require(_option == 0 || _option == 1 || _option == 2, "Invalid option");
        require(
            ballots[_projectId][_index].votesCount + 1 <= 1000,
            "Max votes reached"
        );
        require(
            block.timestamp < ballots[_projectId][_index].endTime,
            "Vote expired"
        );

        if (_option == 0) {
            ballots[_projectId][_index].option1Votes =
                ballots[_projectId][_index].option1Votes +
                _tokenIds.length;
        } else if (_option == 1) {
            ballots[_projectId][_index].option2Votes =
                ballots[_projectId][_index].option2Votes +
                _tokenIds.length;
        } else {
            ballots[_projectId][_index].option3Votes =
                ballots[_projectId][_index].option3Votes +
                _tokenIds.length;
        }

        // for (uint256 i = 0; i < _tokenIds.length; i++) {
        //     votings[_projectId][_index][_tokenIds[i]].vote = _option;
        //     votings[_projectId][_index][_tokenIds[i]].voted = true;
        //     ballots[_projectId][_index].votesCount++;
        // }

        emit Voted(_index, block.timestamp);
    }

    // ------------------
    // Admin functions
    // -----------------

    function setContract(address _mpManager, address _collection)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        moonpageManager = IMoonpageManager(_mpManager);
        moonpageCollection = IMoonpageCollection(_collection);
    }

    function pause() external onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() external onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    function emergencyWithdraw(address _to)
        external
        payable
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(_to != address(0), "Cannot withdraw to the 0 address");
        payable(_to).transfer(address(this).balance);
    }

    receive() external payable {}

    // ------------------
    // Explicit overrides
    // ------------------

    function _authorizeUpgrade(address newImplementation)
        internal
        override
        onlyRole(UPGRADER_ROLE)
    {}
}
